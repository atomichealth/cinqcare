@use "sass:map";
@use "sass:math";

/***************/
/* Responsive */
/*************/

// Breakpoints defined to be used in mixin
$breakpoints: (
	"mobile": 500px,
	"mobile-landscape": 640px,
	"tablet": 768px,
	"tablet-landscape": 1024px,
	"masonry-desktop": 1100px,
	"laptop": 1256px
		// 1256px is the $max-width variable (1216px) plus the 20px padding on each side (1216 + 40),,,,
);

@mixin respond-to($breakpoint, $type: max) {
	$breakpoint-value: if(
		map.has-key($breakpoints, $breakpoint),
		map.get($breakpoints, $breakpoint),
		$breakpoint
	);
	@media (#{if($type == min, 'min-width', 'max-width')}: $breakpoint-value) {
		@content;
	}
}

@mixin debug-layout() {
	* {
		outline: 2px dotted red;
		outline-offset: -15px;
	}
	* * {
		outline: 2px dotted green;
		outline-offset: -15px;
	}
	* * * {
		outline: 2px dotted orange;
		outline-offset: -15px;
	}
	* * * * {
		outline: 2px dotted blue;
		outline-offset: -15px;
	}
	* * * * * {
		outline: 1px solid red;
		outline-offset: -15px;
	}
	* * * * * * {
		outline: 1px solid green;
		outline-offset: -15px;
	}
	* * * * * * * {
		outline: 1px solid orange;
		outline-offset: -15px;
	}
	* * * * * * * * {
		outline: 1px solid blue;
		outline-offset: -15px;
	}
}

/// Convert to EMs function
/// @param {number} target - The value to be converted
/// @param {number} context [$suit-font-size] The base font size
/// @return {em} value
@function toem($target, $context: 16px) {
  @if $target == 0 {
    @return 0
  }

  @return math.div($target, $context)+0em;
}

/// Convert to REMs function
/// @param {number} target - The value to be converted
/// @param {number} context [16px] - The base font size
/// @return {rem} value
@function torem($target, $context: 16px) {
  @if $target == 0 {
    @return 0
  }

  @return math.div($target, $context)+0em;
}